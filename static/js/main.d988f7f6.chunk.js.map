{"version":3,"sources":["Board/Board.module.css","GameOver/GameOver.module.css","assets/rover.mp4","utils/gameFunctions.js","Board/Board.js","GameOver/GameOver.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","isGameOver","board","i","minimax","depth","isMax","numMoves","player","difficulty","score","best","Math","max","min","generateBestMove","isComputer","bestMove","bestVal","moveVal","Board","props","suggestions","useEffect","cellsArray","document","getElementsByClassName","style","backgroundColor","className","styles","row","cell","onClick","playMove","useState","hidden","setHidden","container","id","gameover","message","winner","restartGame","numPlayers","setNumPlayers","p1Name","setP1Name","p2Name","setP2Name","setDifficulty","setSuggestions","setBoard","moves","setMoves","setBestMove","setWinner","position","move","map","value","index","win","GameOver","fontSize","margin","src","Rover","playsInline","muted","autoPlay","loop","height","type","onChange","event","target","checked","floor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d988f7f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__xtnRe\",\"row\":\"Board_row__22fq5\",\"cell\":\"Board_cell__3zmKG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GameOver_container__2y-k6\",\"gameover\":\"GameOver_gameover__2HdXh\",\"message\":\"GameOver_message__19sQ3\"};","module.exports = __webpack_public_path__ + \"static/media/rover.11305738.mp4\";","/* Function to determine game winner */\r\nexport const isGameOver = (board) => {\r\n    /* Check for row victory */\r\n    for (let i = 0; i < 3; i++) {\r\n        if (board[3 * i]) if (board[3 * i] === board[3 * i + 1] && board[3 * i] === board[3 * i + 2]) return board[3 * i]\r\n    }\r\n\r\n    /* Check for column victory */\r\n    for (let i = 0; i < 3; i++) {\r\n        if (board[i]) if (board[i] === board[i + 3] && board[i] === board[i + 6]) return board[i]\r\n    }\r\n\r\n    /* Check for diagonal victory */\r\n    if (\r\n        (board[0] === board[4] && board[0] === board[8]) ||\r\n        (board[2] === board[4] && board[2] === board[6])\r\n    ) return board[4]\r\n}\r\n\r\n/* Minimax algorithm for determining best move */\r\nconst minimax = (board, depth, isMax, numMoves, player, difficulty) => {\r\n    if (depth > difficulty) return 0\r\n    var score = isGameOver(board)\r\n    if (score === player) return 10\r\n    else if (score) return -10\r\n\r\n    if (numMoves === 9) return 0\r\n\r\n    var i\r\n    if (isMax) {\r\n        let best = -1000\r\n        for (i = 0; i < 9; i++) {\r\n            if (!board[i]) {\r\n                board[i] = (numMoves % 2) ? 'O' : 'X'\r\n                best = Math.max(best, minimax(board, depth + 1, !isMax, numMoves + 1, player, difficulty))\r\n                board[i] = ''\r\n            }\r\n        }\r\n        return best\r\n    }\r\n    else {\r\n        let best = 1000;\r\n        for (i = 0; i < 9; i++) {\r\n            if (!board[i]) {\r\n                board[i] = (numMoves % 2) ? 'O' : 'X'\r\n                best = Math.min(best, minimax(board, depth + 1, !isMax, numMoves + 1, player, difficulty))\r\n                board[i] = ''\r\n            }\r\n        }\r\n        return best\r\n    }\r\n}\r\n\r\n/* Function that tries all possible moves and determines best one */\r\nexport const generateBestMove = (board, numMoves, isComputer, difficulty) => {\r\n    var bestVal = -1000\r\n    var bestMove\r\n    for (var i = 0; i < 9; i++) {\r\n        if (!board[i]) {\r\n            let player = (numMoves % 2) ? 'O' : 'X'\r\n            board[i] = player\r\n            var moveVal\r\n            if (isComputer) moveVal = minimax(board, 0, false, numMoves + 1, player, difficulty)\r\n            else moveVal = minimax(board, 0, false, numMoves + 1, player, 9)\r\n            board[i] = ''\r\n            if (moveVal > bestVal) {\r\n                bestMove = i\r\n                bestVal = moveVal\r\n            }\r\n        }\r\n    }\r\n    return bestMove\r\n}","import React, { useEffect } from 'react'\r\nimport styles from './Board.module.css'\r\n\r\nexport default function Board(props) {\r\n    const { suggestions, bestMove } = props\r\n\r\n    useEffect(() => {\r\n        let cellsArray = document.getElementsByClassName('cell')\r\n        for (var i = 0; i < 9; i++) {\r\n            if (i === bestMove) {\r\n                if (suggestions) cellsArray[i].style.backgroundColor = 'palegreen'\r\n                else cellsArray[i].style.backgroundColor = '#ffd460'\r\n            }\r\n            else cellsArray[i].style.backgroundColor = '#ffd460'\r\n        }\r\n    }, [suggestions, bestMove])\r\n\r\n    return (\r\n        <div className={styles.board}>\r\n            <div className={styles.row}>\r\n                <div className={styles.cell + ' cell'} onClick={() => props.playMove(0)}>{props.board[0]}</div>\r\n                <div className={styles.cell + ' cell'} onClick={() => props.playMove(1)}>{props.board[1]}</div>\r\n                <div className={styles.cell + ' cell'} onClick={() => props.playMove(2)}>{props.board[2]}</div>\r\n            </div>\r\n            <div className={styles.row}>\r\n                <div className={styles.cell + ' cell'} onClick={() => props.playMove(3)}>{props.board[3]}</div>\r\n                <div className={styles.cell + ' cell'} onClick={() => props.playMove(4)}>{props.board[4]}</div>\r\n                <div className={styles.cell + ' cell'} onClick={() => props.playMove(5)}>{props.board[5]}</div>\r\n            </div>\r\n            <div className={styles.row}>\r\n                <div className={styles.cell + ' cell'} onClick={() => props.playMove(6)}>{props.board[6]}</div>\r\n                <div className={styles.cell + ' cell'} onClick={() => props.playMove(7)}>{props.board[7]}</div>\r\n                <div className={styles.cell + ' cell'} onClick={() => props.playMove(8)}>{props.board[8]}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport styles from './GameOver.module.css'\r\n\r\nexport default (props) => {\r\n    const [hidden, setHidden] = useState(false)\r\n\r\n    return (\r\n        <div>\r\n            {!hidden && <div className={styles.container} id='contain'>\r\n                <p className={styles.gameover}>Game Over</p>\r\n                <p className={styles.message}>{props.winner} wins</p>\r\n                <button onClick={() => {\r\n                    setHidden(true)\r\n                    props.restartGame()\r\n                }}>Restart</button>\r\n            </div>}\r\n        </div >\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport './App.css'\r\n\r\nimport { isGameOver, generateBestMove } from './utils/gameFunctions'\r\n\r\nimport Board from './Board/Board'\r\nimport GameOver from './GameOver/GameOver'\r\n\r\nimport Rover from './assets/rover.mp4'\r\n\r\nexport default () => {\r\n    /* Game Settings */\r\n    const [numPlayers, setNumPlayers] = useState(1)\r\n    const [p1Name, setP1Name] = useState('Human')\r\n    const [p2Name, setP2Name] = useState('Computer')\r\n    const [difficulty, setDifficulty] = useState(4)\r\n    const [suggestions, setSuggestions] = useState(false)\r\n\r\n    /* Game State */\r\n    const [board, setBoard] = useState(['', '', '', '', '', '', '', '', ''])\r\n    const [moves, setMoves] = useState(0)\r\n    const [bestMove, setBestMove] = useState(-1)\r\n    const [winner, setWinner] = useState('')\r\n\r\n    /* Execute on Game Settings change */\r\n    useEffect(() => {\r\n        if (numPlayers === 1) {\r\n            setP1Name('Human')\r\n            setP2Name('Computer')\r\n            restartGame()\r\n        }\r\n        if (numPlayers === 2) {\r\n            setP1Name('Player 1')\r\n            setP2Name('Player 2')\r\n            restartGame()\r\n        }\r\n    }, [numPlayers])\r\n\r\n    /* Function to play a move */\r\n    function playMove(position) {\r\n        if (!winner && moves < 9 && !board[position]) {\r\n            let move = (moves % 2) ? 'O' : 'X'\r\n            board[position] = move\r\n            setBoard(board.map((value, index) => {\r\n                if (index === position) return move\r\n                else return value\r\n            }))\r\n            setMoves(moves + 1)\r\n        }\r\n    }\r\n\r\n    /* Execute on Board state change */\r\n    useEffect(() => {\r\n        let win = isGameOver(board)\r\n        if (moves === 9 || win) {\r\n            if (win) setWinner(win)\r\n            else setWinner('No one')\r\n        }\r\n        else {\r\n            if ((p1Name === 'Computer' && !(moves % 2)) || (p2Name === 'Computer' && moves % 2)) {\r\n                playMove(generateBestMove(board, moves, true, difficulty))\r\n            }\r\n            else setBestMove(generateBestMove(board, moves, false))\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [board, moves, difficulty, numPlayers, p1Name, p2Name])\r\n\r\n    /* Restart Game */\r\n    function restartGame() {\r\n        setBoard(['', '', '', '', '', '', '', '', ''])\r\n        setMoves(0)\r\n        setWinner('')\r\n        setBestMove(-1)\r\n    }\r\n\r\n    /* Display winner name */\r\n    useEffect(() => {\r\n        if (winner === 'X') setWinner(p1Name)\r\n        else if (winner === 'O') setWinner(p2Name)\r\n    }, [winner, p1Name, p2Name])\r\n\r\n    return (\r\n        <div id='container'>\r\n            {winner && <GameOver\r\n                winner={winner}\r\n                restartGame={restartGame} />\r\n            }\r\n            <div id='header'>\r\n                <p style={{ fontSize: 'xxx-large', margin: '20px' }}>AI</p>\r\n                <video src={Rover} playsInline muted autoPlay loop height='100px' />\r\n                <p style={{ fontSize: 'xxx-large', margin: '20px' }}>Tic Tac Toe</p>\r\n            </div>\r\n            <div id='main'>\r\n                <div id='settings'>\r\n                    <p style={{ fontSize: 'xx-large' }}>Settings</p>\r\n                    <div>\r\n                        <div>\r\n                            <p>Number of Players: {numPlayers} Player</p>\r\n                            <button onClick={() => setNumPlayers(1)}>1 Player</button>\r\n                            <button onClick={() => setNumPlayers(2)}>2 Player</button>\r\n                        </div>\r\n                        {numPlayers === 1 && <div>\r\n                            <p>First move: {p1Name}</p>\r\n                            <button onClick={() => {\r\n                                setP1Name('Human')\r\n                                setP2Name('Computer')\r\n                            }}>Human</button>\r\n                            <button onClick={() => {\r\n                                setP1Name('Computer')\r\n                                setP2Name('Human')\r\n                            }}>Computer</button>\r\n                        </div>}\r\n                        {numPlayers === 1 && <label>\r\n                            <p>Difficulty: {difficulty < 9 ? difficulty : 'Infinity'}</p>\r\n                            <input\r\n                                type='range'\r\n                                min='1'\r\n                                max='9'\r\n                                value={difficulty}\r\n                                onChange={event => setDifficulty(event.target.value)} />\r\n                        </label>}\r\n                        {numPlayers === 2 && <label>\r\n                            <p>Player 1 Name</p>\r\n                            <input\r\n                                type='text'\r\n                                className='inputname'\r\n                                value={p1Name}\r\n                                onChange={event => setP1Name(event.target.value)}\r\n                            />\r\n                        </label>}\r\n                        {numPlayers === 2 && <label>\r\n                            <p>Player 2 Name</p>\r\n                            <input\r\n                                type='text'\r\n                                className='inputname'\r\n                                value={p2Name}\r\n                                onChange={event => setP2Name(event.target.value)}\r\n                            />\r\n                        </label>}\r\n                        <div>\r\n                            <label>\r\n                                <p>Display suggestions?</p>\r\n                                <input\r\n                                    type='checkbox'\r\n                                    checked={suggestions}\r\n                                    onChange={event => setSuggestions(event.target.checked)}\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id='game'>\r\n                    <Board\r\n                        board={board}\r\n                        playMove={playMove}\r\n                        suggestions={suggestions}\r\n                        bestMove={bestMove}\r\n                    />\r\n                    <button onClick={restartGame}>Restart Game</button>\r\n                </div>\r\n                <div id='suggestions'>\r\n                    {suggestions && <p\r\n                        style={{ fontSize: 'x-large' }}\r\n                        onClick={() => setSuggestions(false)}\r\n                    >Best move: {Math.floor(bestMove / 3) + 1} row, {bestMove % 3 + 1} column</p>}\r\n                    {!suggestions && <p\r\n                        style={{ fontSize: 'x-large' }}\r\n                        onClick={() => setSuggestions(true)}\r\n                    >Click to Display Suggestions</p>}\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}